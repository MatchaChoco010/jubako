/*
 Generated by typeshare 1.0.0
*/

export type EventHandleId = string;

export interface HandleEvent {
	handle_id: EventHandleId;
	handle_events: VNodeEventType[];
	handle_prevent_default_events: VNodeEventType[];
}

export interface DifferenceCommands {
	main: DifferenceCommand[];
	portals: DifferenceCommand[];
	styles: StyleDifferenceCommand[];
}

export interface Element {
	tag_name: string;
	client_height: number;
	client_width: number;
	client_left: number;
	client_top: number;
	scroll_height: number;
	scroll_width: number;
	scroll_left: number;
	scroll_top: number;
}

export interface Event {
	target?: Element;
}

export interface MouseEvent {
	alt_key: boolean;
	button: number;
	buttons: number;
	client_x: number;
	client_y: number;
	ctrl_key: boolean;
	meta_key: boolean;
	movement_x: number;
	movement_y: number;
	offset_x: number;
	offset_y: number;
	page_x: number;
	page_y: number;
	related_target?: Element;
	screen_x: number;
	screen_y: number;
	shift_key: boolean;
	target?: Element;
	x: number;
	y: number;
}

export interface FocusEvent {
	related_target?: Element;
	target?: Element;
}

export interface DragEvent {
	alt_key: boolean;
	button: number;
	buttons: number;
	client_x: number;
	client_y: number;
	ctrl_key: boolean;
	meta_key: boolean;
	movement_x: number;
	movement_y: number;
	offset_x: number;
	offset_y: number;
	page_x: number;
	page_y: number;
	related_target?: Element;
	screen_x: number;
	screen_y: number;
	shift_key: boolean;
	target?: Element;
	x: number;
	y: number;
}

export interface InputEvent {
	data: string;
	input_type: string;
	is_composing: boolean;
	target?: Element;
}

export interface KeyboardEvent {
	alt_key: boolean;
	char_code: number;
	code: string;
	ctrl_key: boolean;
	key: string;
	key_code: number;
	location: number;
	meta_key: boolean;
	repeat: boolean;
	shift_key: boolean;
	target?: Element;
}

export interface ProgressEvent {
	length_computable: boolean;
	loaded: number;
	target?: Element;
	total: number;
}

export interface SubmitEvent {
	submitter?: Element;
	target?: Element;
}

export interface WheelEvent {
	alt_key: boolean;
	button: number;
	buttons: number;
	client_x: number;
	client_y: number;
	ctrl_key: boolean;
	delta_mode: number;
	delta_x: number;
	delta_y: number;
	delta_z: number;
	meta_key: boolean;
	movement_x: number;
	movement_y: number;
	offset_x: number;
	offset_y: number;
	page_x: number;
	page_y: number;
	screen_x: number;
	screen_y: number;
	shift_key: boolean;
	x: number;
	y: number;
	target?: Element;
}

export interface AnimationEvent {
	animation_name: string;
	elapsed_time: number;
	pseudo_element: string;
	target?: Element;
}

export interface PointerEvent {
	alt_key: boolean;
	button: number;
	buttons: number;
	client_x: number;
	client_y: number;
	ctrl_key: boolean;
	height: number;
	is_primary: boolean;
	meta_key: boolean;
	movement_x: number;
	movement_y: number;
	offset_x: number;
	offset_y: number;
	page_x: number;
	page_y: number;
	pointer_id: number;
	pointer_type: string;
	pressure: number;
	related_target?: Element;
	screen_x: number;
	screen_y: number;
	shift_key: boolean;
	target?: Element;
	tilt_x: number;
	tilt_y: number;
	twist: number;
	width: number;
	x: number;
	y: number;
}

export interface Touch {
	identifier: number;
	client_x: number;
	client_y: number;
	page_x: number;
	page_y: number;
	radius_x: number;
	radius_y: number;
	rotation_angle: number;
	screen_x: number;
	screen_y: number;
	target?: Element;
}

export interface TouchEvent {
	alt_key: boolean;
	changed_touches: Touch[];
	ctrl_key: boolean;
	meta_key: boolean;
	shift_key: boolean;
	target_touches: Touch[];
	touches: Touch[];
	target?: Element;
}

export interface TransitionEvent {
	elapsed_time: number;
	pseudo_element: string;
	property_name: string;
	target?: Element;
}

export interface VNodeEvent {
	handle_id: EventHandleId;
	kind: VNodeEventKind;
}

export type DifferenceProps =
	| { type: "Add", content: string }
	| { type: "Remove", content: string };

export type DifferenceClass =
	| { type: "Add", content: string }
	| { type: "Remove", content: string };

export type DifferenceEvent =
	| { type: "None", content?: undefined }
	| { type: "Update", content: HandleEvent };

export type DifferenceCommand =
	| { type: "UpdateElement", content: {
	index: number;
	class_diff: DifferenceClass[];
	props_diff: DifferenceProps[];
	event_diff: DifferenceEvent;
	children: DifferenceCommand[];
}}
	| { type: "UpdateText", content: {
	index: number;
	new_text: string;
}}
	| { type: "ReplaceToElement", content: {
	index: number;
	new_tag: string;
	classes: string[];
	props: string[];
	event: HandleEvent;
	children: DifferenceCommand[];
}}
	| { type: "ReplaceToText", content: {
	index: number;
	text: string;
}}
	| { type: "InsertElement", content: {
	index: number;
	tag: string;
	classes: string[];
	props: string[];
	event: HandleEvent;
	children: DifferenceCommand[];
}}
	| { type: "InsertText", content: {
	index: number;
	text: string;
}}
	| { type: "Remove", content: {
	index: number;
}};

export type StyleDifferenceCommand =
	| { type: "AddStyle", content: {
	class_name: string;
	value: string;
}}
	| { type: "RemoveStyle", content: {
	class_name: string;
}};

export type VNodeEventKind =
	| { type: "Abort", content: Event }
	| { type: "AnimationCancel", content: AnimationEvent }
	| { type: "AnimationEnd", content: AnimationEvent }
	| { type: "AnimationIteration", content: AnimationEvent }
	| { type: "AnimationStart", content: AnimationEvent }
	| { type: "AuxClick", content: MouseEvent }
	| { type: "Blur", content: FocusEvent }
	| { type: "Cancel", content: Event }
	| { type: "CanPlay", content: Event }
	| { type: "CanPlayThrough", content: Event }
	| { type: "Change", content: Event }
	| { type: "Click", content: MouseEvent }
	| { type: "Close", content: Event }
	| { type: "ContextMenu", content: MouseEvent }
	| { type: "Copy", content: Event }
	| { type: "CueChange", content: Event }
	| { type: "Cut", content: Event }
	| { type: "DoubleClick", content: MouseEvent }
	| { type: "Drag", content: DragEvent }
	| { type: "DragEnd", content: DragEvent }
	| { type: "DragEnter", content: DragEvent }
	| { type: "DragExit", content: DragEvent }
	| { type: "DragLeave", content: DragEvent }
	| { type: "DragOver", content: DragEvent }
	| { type: "DragStart", content: DragEvent }
	| { type: "Drop", content: DragEvent }
	| { type: "DurationChange", content: Event }
	| { type: "Emptied", content: Event }
	| { type: "Ended", content: Event }
	| { type: "Error", content: Event }
	| { type: "Focus", content: FocusEvent }
	| { type: "FocusIn", content: FocusEvent }
	| { type: "FocusOut", content: FocusEvent }
	| { type: "FormData", content: Event }
	| { type: "GotPointerCapture", content: PointerEvent }
	| { type: "Input", content: InputEvent }
	| { type: "Invalid", content: Event }
	| { type: "KeyDown", content: KeyboardEvent }
	| { type: "KeyPress", content: KeyboardEvent }
	| { type: "KeyUp", content: KeyboardEvent }
	| { type: "Load", content: Event }
	| { type: "LoadEnd", content: ProgressEvent }
	| { type: "LoadedData", content: Event }
	| { type: "LoadedMetadata", content: Event }
	| { type: "LoadStart", content: ProgressEvent }
	| { type: "LostPointerCapture", content: PointerEvent }
	| { type: "MouseDown", content: MouseEvent }
	| { type: "MouseEnter", content: MouseEvent }
	| { type: "MouseLeave", content: MouseEvent }
	| { type: "MouseMove", content: MouseEvent }
	| { type: "MouseOut", content: MouseEvent }
	| { type: "MouseOver", content: MouseEvent }
	| { type: "MouseUp", content: MouseEvent }
	| { type: "Paste", content: Event }
	| { type: "Pause", content: Event }
	| { type: "Play", content: Event }
	| { type: "Playing", content: Event }
	| { type: "PointerCancel", content: PointerEvent }
	| { type: "PointerDown", content: PointerEvent }
	| { type: "PointerEnter", content: PointerEvent }
	| { type: "PointerLeave", content: PointerEvent }
	| { type: "PointerMove", content: PointerEvent }
	| { type: "PointerOut", content: PointerEvent }
	| { type: "PointerOver", content: PointerEvent }
	| { type: "PointerUp", content: PointerEvent }
	| { type: "Progress", content: ProgressEvent }
	| { type: "RateChange", content: Event }
	| { type: "Reset", content: Event }
	| { type: "Resize", content: Event }
	| { type: "Scroll", content: Event }
	| { type: "SecurityPolicyViolation", content: Event }
	| { type: "Seeked", content: Event }
	| { type: "Seeking", content: Event }
	| { type: "Select", content: Event }
	| { type: "SelectionChange", content: Event }
	| { type: "SelectStart", content: Event }
	| { type: "Show", content: Event }
	| { type: "SlotChange", content: Event }
	| { type: "Stalled", content: Event }
	| { type: "Submit", content: SubmitEvent }
	| { type: "Suspend", content: Event }
	| { type: "TimeUpdate", content: Event }
	| { type: "Toggle", content: Event }
	| { type: "TouchCancel", content: TouchEvent }
	| { type: "TouchEnd", content: TouchEvent }
	| { type: "TouchMove", content: TouchEvent }
	| { type: "TouchStart", content: TouchEvent }
	| { type: "TransitionCancel", content: TransitionEvent }
	| { type: "TransitionEnd", content: TransitionEvent }
	| { type: "TransitionRun", content: TransitionEvent }
	| { type: "TransitionStart", content: TransitionEvent }
	| { type: "VolumeChange", content: Event }
	| { type: "Waiting", content: Event }
	| { type: "Wheel", content: WheelEvent };

export enum VNodeEventType {
	Abort = "Abort",
	AnimationCancel = "AnimationCancel",
	AnimationEnd = "AnimationEnd",
	AnimationIteration = "AnimationIteration",
	AnimationStart = "AnimationStart",
	AuxClick = "AuxClick",
	Blur = "Blur",
	Cancel = "Cancel",
	CanPlay = "CanPlay",
	CanPlayThrough = "CanPlayThrough",
	Change = "Change",
	Click = "Click",
	Close = "Close",
	ContextMenu = "ContextMenu",
	Copy = "Copy",
	CueChange = "CueChange",
	Cut = "Cut",
	DoubleClick = "DoubleClick",
	Drag = "Drag",
	DragEnd = "DragEnd",
	DragEnter = "DragEnter",
	DragLeave = "DragLeave",
	DragOver = "DragOver",
	DragStart = "DragStart",
	Drop = "Drop",
	DurationChange = "DurationChange",
	Emptied = "Emptied",
	Ended = "Ended",
	Error = "Error",
	Focus = "Focus",
	FocusIn = "FocusIn",
	FocusOut = "FocusOut",
	FormData = "FormData",
	GotPointerCapture = "GotPointerCapture",
	Input = "Input",
	Invalid = "Invalid",
	KeyDown = "KeyDown",
	KeyPress = "KeyPress",
	KeyUp = "KeyUp",
	Load = "Load",
	LoadedData = "LoadedData",
	LoadedMetadata = "LoadedMetadata",
	LoadStart = "LoadStart",
	LostPointerCapture = "LostPointerCapture",
	MouseDown = "MouseDown",
	MouseEnter = "MouseEnter",
	MouseLeave = "MouseLeave",
	MouseMove = "MouseMove",
	MouseOut = "MouseOut",
	MouseOver = "MouseOver",
	MouseUp = "MouseUp",
	Paste = "Paste",
	Pause = "Pause",
	Play = "Play",
	Playing = "Playing",
	PointerCancel = "PointerCancel",
	PointerDown = "PointerDown",
	PointerEnter = "PointerEnter",
	PointerLeave = "PointerLeave",
	PointerMove = "PointerMove",
	PointerOut = "PointerOut",
	PointerOver = "PointerOver",
	PointerUp = "PointerUp",
	Progress = "Progress",
	RateChange = "RateChange",
	Reset = "Reset",
	Resize = "Resize",
	Scroll = "Scroll",
	SecurityPolicyViolation = "SecurityPolicyViolation",
	Seeked = "Seeked",
	Seeking = "Seeking",
	Select = "Select",
	SelectionChange = "SelectionChange",
	SelectStart = "SelectStart",
	SlotChange = "SlotChange",
	Stalled = "Stalled",
	Submit = "Submit",
	Suspend = "Suspend",
	TimeUpdate = "TimeUpdate",
	Toggle = "Toggle",
	TouchCancel = "TouchCancel",
	TouchEnd = "TouchEnd",
	TouchMove = "TouchMove",
	TouchStart = "TouchStart",
	TransitionCancel = "TransitionCancel",
	TransitionEnd = "TransitionEnd",
	TransitionRun = "TransitionRun",
	TransitionStart = "TransitionStart",
	VolumeChange = "VolumeChange",
	Waiting = "Waiting",
	Wheel = "Wheel",
}
